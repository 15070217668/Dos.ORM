//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//     Support: http://www.cnblogs.com/huxj
//     Website: http://ITdos.com/Dos/ORM/Index.html
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Data;
using System.Data.Common;
using Dos.ORM;
using Dos.ORM.Common;

namespace Model
{

    /// <summary>
    /// 实体类TestTable2 。(属性说明自动提取数据库字段的描述信息)
    /// </summary>
    [Serializable]
    public partial class TestTable2 : Entity
    {
        public TestTable2() : base("TestTable2") { }

        #region Model
        private string _Id;
        private string _test1;
        private string _test2;
        /// <summary>
        /// 
        /// </summary>
        public string Id
        {
            get { return _Id; }
            set
            {
                this.OnPropertyValueChange(_.Id, _Id, value);
                this._Id = value;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        public string test1
        {
            get { return _test1; }
            set
            {
                this.OnPropertyValueChange(_.test1, _test1, value);
                this._test1 = value;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        public string test2
        {
            get { return _test2; }
            set
            {
                this.OnPropertyValueChange(_.test2, _test2, value);
                this._test2 = value;
            }
        }
        #endregion

        #region Method
        /// <summary>
        /// 获取实体中的主键列
        /// </summary>
        public override Field[] GetPrimaryKeyFields()
        {
            return new Field[] {
				_.Id};
        }
        /// <summary>
        /// 获取列信息
        /// </summary>
        public override Field[] GetFields()
        {
            return new Field[] {
				_.Id,
				_.test1,
				_.test2};
        }
        /// <summary>
        /// 获取值信息
        /// </summary>
        public override object[] GetValues()
        {
            return new object[] {
				this._Id,
				this._test1,
				this._test2};
        }
        /// <summary>
        /// 给当前实体赋值
        /// </summary>
        public override void SetPropertyValues(IDataReader reader)
        {
            this._Id = DataUtils.ConvertValue<string>(reader["Id"]);
            this._test1 = DataUtils.ConvertValue<string>(reader["test1"]);
            this._test2 = DataUtils.ConvertValue<string>(reader["test2"]);
        }
        /// <summary>
        /// 给当前实体赋值
        /// </summary>
        public override void SetPropertyValues(DataRow row)
        {
            this._Id = DataUtils.ConvertValue<string>(row["Id"]);
            this._test1 = DataUtils.ConvertValue<string>(row["test1"]);
            this._test2 = DataUtils.ConvertValue<string>(row["test2"]);
        }
        #endregion

        #region _Field
        /// <summary>
        /// 字段信息
        /// </summary>
        public class _
        {
            /// <summary>
            /// * 
            /// </summary>
            public readonly static Field All = new Field("*", "TestTable2");
            /// <summary>
            /// 
            /// </summary>
            public readonly static Field Id = new Field("Id", "TestTable2", "Id");
            /// <summary>
            /// 
            /// </summary>
            public readonly static Field test1 = new Field("test1", "TestTable2", "test1");
            /// <summary>
            /// 
            /// </summary>
            public readonly static Field test2 = new Field("test2", "TestTable2", "test2");
        }
        #endregion


    }
}

